# 
#    Copyright 2016 Shawn Gilroy
#
#    This file is part of Discounting Model Selector.
#
#    Discounting Model Selector is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, version 2.
#
#    Discounting Model Selector is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with Discounting Model Selector.  If not, see <http://www.gnu.org/licenses/gpl-2.0.html>.
#
#
# 
# Companion Script for BDS
# params = BDS returns
# output 1: Bar chart, proportions of wins using ggplot2
# output 2: Semi-logged (x) discounting functions using ggplot2

library(ggplot2)
library(reshape2)

barGraph = data.frame(Noise=output[[1]]['noise.prob'],
                      Hyperbolic=output[[2]]['Mazur.prob'],
                      Exponential=output[[3]]['exp.prob'],
                      Hyperboloid.M=output[[4]]['MG.prob'],
                      Hyperboloid.R=output[[5]]['Rachlin.prob'],
                      QuasiHyperbolic=output[[9]]['BD.prob'])

colnames(barGraph)[1] <- "Noise"
colnames(barGraph)[2] <- "Hyperbolic"
colnames(barGraph)[3] <- "Exponential"
colnames(barGraph)[4] <- "Hyperboloid.M"
colnames(barGraph)[5] <- "Hyperboloid.R"
colnames(barGraph)[6] <- "QuasiHyperbolic"

barGraph <- barGraph[colSums(!is.na(barGraph)) > 0]
barGraph.melt <- melt(barGraph)

ggBar <- ggplot(barGraph.melt, aes(x = factor(variable), y=value)) +
  geom_bar(stat="identity") + 
  ggtitle("Model Competition Results\n") +
  ylab("Competition (higher is better)") +
  theme_bw() +
  theme(panel.grid.minor = element_blank()) +
  theme(panel.grid.major = element_blank()) +
  theme(panel.border = element_rect(colour = "white", 
                                    fill=FALSE, 
                                    size=0)) +
  theme(text = element_text(size=16)) +
  theme(axis.title.x = element_blank()) +
  theme(axis.line.x = element_line(colour = "black")) +
  theme(axis.line.y = element_line(colour = "black")) +
  theme(axis.text.x = element_text(angle = 90, hjust = 1)) + 
  theme(axis.ticks = element_blank())

delaySeries = 1:(endDelay+1)
expSeries = rep(NA,endDelay+1)
hypSeries = rep(NA,endDelay+1)
quaSeries = rep(NA,endDelay+1)
myerSeries = rep(NA,endDelay+1)
rachSeries = rep(NA,endDelay+1)

samuelsonK <- as.numeric(output[[3]]['exp.lnk'])
ainslieK <- as.numeric(output[[2]]['Mazur.lnk'])
betaConstant <- as.numeric(output[[9]]['BD.beta'])
deltaConstant <- as.numeric(output[[9]]['BD.delta'])
myerK <- as.numeric(output[[4]]['MG.lnk'])
myerS <- as.numeric(output[[4]]['MG.s'])
rachK <- as.numeric(output[[5]]['Rachlin.lnk'])
rachS <- as.numeric(output[[5]]['Rachlin.s'])

ed50 <- as.numeric(output[[8]]['lnED50.mostprob'])

for (delay in delaySeries)
{
  delaySeries[delay] = delay-1
  
  if(!is.na(samuelsonK))
  {
    expSeries[delay] = (A * exp(-(exp(samuelsonK))*delay))
  }
  if(!is.na(ainslieK))
  {
    hypSeries[delay] = A * (1+exp(ainslieK)*delay)^(-1)
  }
  if(!is.na(betaConstant))
  {
    quaSeries[delay] = A * ((betaConstant)*(deltaConstant)^delay)
  }
  if(!is.na(myerK))
  {
    myerSeries[delay] = A * (1+exp(myerK)*delay)^(-myerS)    
  }
  if(!is.na(rachK))
  {
    rachSeries[delay] = A * (1 + exp(rachK)*(delay^rachS))^(-1)
  }
}

totalFrame = data.frame(Delays=delaySeries,
                        Exponential=expSeries,
                        Hyperbolic=hypSeries,
                        QuasiHyperbolic=quaSeries,
                        HyperboloidM=myerSeries,
                        HyperboloidR=rachSeries)

totalFrame.melt <- melt(totalFrame, id=c("Delays"))

pointFrame <- data.frame(DelaysP=mDelays, ValuesP=mIndiff)

logChart <- ggplot() +
  geom_line(data=totalFrame.melt, aes(x=Delays, y=value, group=variable, colour = variable)) + 
  geom_point(data=pointFrame, aes(x=pointFrame$DelaysP, y=pointFrame$ValuesP), size=2, shape=21, show.legend=F) +
  geom_segment(aes(x=0, xend=exp(ed50), y=A/2, yend=A/2), inherit.aes=FALSE, linetype="dashed", show.legend = F) +
  expand_limits(y=0) +
  theme_bw() +
  theme(panel.grid.minor = element_blank()) +
  ylab("Value") +
  scale_x_continuous(trans = 'log',
                     limits = c(1 , endDelay),
                     breaks = scales::trans_breaks('log', function(x) exp(x)),
                     labels = scales::trans_format('log', scales::math_format(.x))) +
  annotation_logticks(sides = "b") +
  xlab("ln(Delay)") +
  theme(panel.background = element_blank(),
        panel.grid.major = element_blank(), 
        panel.grid.minor = element_blank(),
        panel.border = element_rect(colour = "white", 
                                    fill=FALSE, 
                                    size=0),
        axis.line.x = element_line(colour = "black"),
        axis.line.y = element_line(colour = "black"),
        axis.text.x=element_text(colour="black"),
        axis.text.y=element_text(colour="black"),
        text = element_text(size=16),
        legend.position = "bottom",
        legend.title = element_blank(),
        legend.key = element_rect(fill = "transparent", colour = "transparent")) +
  guides(col = guide_legend(ncol = 3))
  

svg(tempf1 <- tempfile(fileext = '.svg'), width = 9, height = 9)
print(ggBar)
dev.off()

svg(tempf2 <- tempfile(fileext = '.svg'), width = 9, height = 9)
print(logChart)
dev.off()

require('base64enc')
barString <- base64encode(readBin(tempf1, 'raw', file.info(tempf1)[1, 'size']), 'txt')
lineString <- base64encode(readBin(tempf2, 'raw', file.info(tempf2)[1, 'size']), 'txt')

unlink(tempf1)
unlink(tempf2)
